import { Component, Input, Output, EventEmitter,
	Directive, forwardRef, DoCheck } from '@angular/core';
import { FormControl, NG_VALIDATORS, NgForm } from '@angular/forms';

interface Contact {
	name: string;
	phone: string;
	email: string;
}

@Directive({
	selector: '[minLen][ngModel]',
	providers: [{
		provide: NG_VALIDATORS,
		useExisting: forwardRef(() => MinLenDirective),
		multi: true
	}]
})
export class MinLenDirective {

	private _minLen: number;

	@Input()
	set minLen(value: any) {
		const intValue = parseInt(value, 10);
		this._minLen = intValue || 0;
	}

	validate(c: FormControl) {

		console.log(this._minLen);

		if (this._minLen > 0 && (c.value == null || String(c.value).length < this._minLen)) {
			console.log('minLen invalid');
			return { minlen: true };
		}
		console.log('minLen valid');
		return null;
	}
}

@Component({
	selector: 'validation-summary',
	template: `<div *ngIf="formToValidate.submitted && errors.length > 0">
	<h3>Errors</h3>
	<ul><li *ngFor="let error of errors">{{messages[error.controlName][error.message]}}</li></ul>
</div>`
})
export class ValidationSummaryComponent implements DoCheck {

	@Input()
	formToValidate: NgForm;

	@Input()
	messages: any;

	errors: string[] = [];

	ngDoCheck() {

		this.errors = !this.formToValidate.valid
			? [].concat(...Object.keys(this.formToValidate.controls).map(controlKey => {

					if (this.formToValidate.controls[controlKey].errors) {
						return Object.keys(this.formToValidate.controls[controlKey].errors)
							.map(errorKey => ({ controlName: controlKey, message: errorKey }));
					} else {
						return [];
					}
				}))
			: [];

	}


}

@Component({
	selector: 'contact-form',
	template: `<form novalidate #contactForm="ngForm" (submit)="submitContact(contactForm, $event)">
	<h2>{{header}}</h2>
	<validation-summary [formToValidate]="contactForm" [messages]="messages"></validation-summary>
	<span>{{contactForm.submitted}}</span>
	<div class="form-group">
		<label for="contact-name">Name:</label>
		<input type="text" id="contact-name" name="contactName"
			class="form-control" [(ngModel)]="contact.name" required [minLen]="nameMinLength">
	</div>
	<div class="form-group">
		<label for="contact-phone">Phone:</label>
		<input type="tel" id="contact-phone" name="contactPhone"
			class="form-control" [(ngModel)]="contact.phone" required>
	</div>
	<div class="form-group">
		<label for="contact-email">Email:</label>
		<input type="email" id="contact-email" name="contactEmail"
			class="form-control" [(ngModel)]="contact.email" required>
	</div>
	<button>Submit</button>
</form>`
})
export class ContactFormComponent {

	contact: Contact = {
		name: '', phone: '', email: ''
	};

	nameMinLength: number = 4;

	messages: any = {
		contactName: {
			required: 'Contact email is a required field.',
			minlen: `Contact email requires a minimum length of ${this.nameMinLength}`
		},
		contactPhone: {
			required: 'Contact phone is a required field.'
		},
		contactEmail: {
			required: 'Contact email is a required field.'
		}
	};

	@Input()
	header: string;

	@Output()
	submit: EventEmitter<Contact> = new EventEmitter<Contact>();

	submitContact(contactForm: NgForm, e: Event) {

		e.stopPropagation();
		e.preventDefault();

		if (contactForm.valid) {
			this.submit.emit(this.contact);
		}
	}

}

@Component({
	selector: 'my-app',
	styles: [require('./app.component.scss')],
	template: require('./app.component.html')
})
export class AppComponent {

	logContact(contact: Contact) {
		console.log(contact);
	}


}